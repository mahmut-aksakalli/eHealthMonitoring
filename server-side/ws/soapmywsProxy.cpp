/* soapmywsProxy.cpp
   Generated by gSOAP 2.8.67 for sensor.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapmywsProxy.h"

mywsProxy::mywsProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	mywsProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

mywsProxy::mywsProxy(const mywsProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

mywsProxy::mywsProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	mywsProxy_init(_soap->imode, _soap->omode);
}

mywsProxy::mywsProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	mywsProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

mywsProxy::mywsProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	mywsProxy_init(iomode, iomode);
}

mywsProxy::mywsProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	mywsProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

mywsProxy::mywsProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	mywsProxy_init(imode, omode);
}

mywsProxy::~mywsProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void mywsProxy::mywsProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "urn:myws", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

mywsProxy *mywsProxy::copy()
{	mywsProxy *dup = SOAP_NEW_UNMANAGED(mywsProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

mywsProxy& mywsProxy::operator=(const mywsProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void mywsProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void mywsProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	mywsProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void mywsProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *mywsProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *mywsProxy::soap_fault()
{	return this->soap->fault;
}

const char *mywsProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *mywsProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int mywsProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int mywsProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void mywsProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void mywsProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *mywsProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int mywsProxy::getSensorData(const char *endpoint, const char *soap_action, ns__sensorData *sensorReading)
{
	struct ns__getSensorData soap_tmp_ns__getSensorData;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getSensorData(soap, &soap_tmp_ns__getSensorData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getSensorData(soap, &soap_tmp_ns__getSensorData, "ns:getSensorData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getSensorData(soap, &soap_tmp_ns__getSensorData, "ns:getSensorData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sensorReading)
		return soap_closesock(soap);
	sensorReading->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	sensorReading->soap_get(soap, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
